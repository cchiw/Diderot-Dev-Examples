//sketch incomplete
//how do I differentiate a block

/*
vec2 x=[1,1];
ofield#1(2)[] g1 = poly(x,fmod(|fmod(x[0],1)| + |fmod(x[1],1)|, 1));
function real posrnd1(vec2 v, real rad) {
    vec2 p = 10000*v/rad;
    return inst(g1,p);
}
*/

//copied for diderot example program
function real cat(real r) =
1 + r*7
if r < 0.666 else r-8
if r < 1 else 0;


//copied for diderot example program
function real phi(real r) =
    1 + r*(-4.248582222661734 + r*(5.991287388535527 + (-2.864766048887071 + 0.06790595504541913*r)*r))
    if r < 0.666 else
        -0.005 + ((0.4482053856358993 + (-2.6838645846460842 + (6.026642031390917 - 4.811690244623482*(-0.666 + r))*(-0.666 + r))*(-0.666 + r))*(-0.666 + r))*(-0.666 + r)
    if r < 1 else 0;

function real phi'(real r) =
    -4.248582222661734 + r*(11.982574777071054 + (-8.594298146661213 + 0.2716238201816765*r)*r)
    if r < 0.666 else
    -15.42591894092919 + 0.4482053856358993*(-1.332 + 2*r) + r*(-2.6838645846460842*(-3.996 + 3*r) + 6.026642031390917*(5.322672 + r*(-7.992 + 4*r)) - 4.811690244623482*(-5.90816592 + r*(13.30668 + r*(-13.32 + 5*r))))
    if r < 1 else 0;

int outSize = 10;
strand sample (int ui, int vi) {
    //real uu = lerp(0.0, 1.0, -0.5, real(ui), real(outSize)-0.5);
    //real vv = lerp(0.0, 1.0, -0.5, real(vi), real(outSize)-0.5);
    //vec2 pos = [uu,vv];

    real s = 3;
    //tensor[2] u =[1,4];
//    output real out = posrnd1(u,s);
    output real out = cat(s);
    update {
             stabilize;
    }
}

initially [ sample(ui, vi) | vi in 0..(outSize-1), ui in 0..(outSize-1) ];
