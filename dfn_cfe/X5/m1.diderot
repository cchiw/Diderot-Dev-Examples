//Takes two input variables
real rad=8;
vec2 v=[1,3];
ofield#2(2)[2] g = cfexp(rad*v,v,rad);
ofield#1(2)[2,2] Dg = ∇⊗g;



int outSize = 10;
strand sample (int ui, int vi) {
    real uu = lerp(0.0, 1.0, -0.5, real(ui), real(outSize)-0.5);
    real vv = lerp(0.0, 1.0, -0.5, real(vi), real(outSize)-0.5);
    vec2 pos = [uu,vv];
    real s = 3;
    tensor[2] u =[1,4];
    tensor[2] w =[2,1];

    // ************************ Example G **********************

    //output tensor[2] out = u*s;
    //output tensor[2] out = inst(g, u, s); //Expected Solution: 3 12

    //output tensor[2] out = inst(g, u, s)- u*s; //Expected Solution: 0
    //output tensor[2] out =  u*s-inst(g, u, s);

    // ************************ Example DG **********************
    real ux = u[0];
    real uy = u[1];
    real dxux = 1;
    real dyuy = 1;
    real dxuy = 0;
    real dyux = 0;
    real dxs = 1;
    real dys = 1;
    // output tensor[2,2] out = [[ux*dxs+dxux*s,ux*dys+dyux*s],[uy*dxs+dxuy*s,uy*dys+dyuy*s]];
    //output tensor[2,2] out = inst(Dg, u,s);//Expected Soution:[4,1,4,7]

    //output tensor[2,2] out = inst(Dg, u,s)-([[ux*dxs+dxux*s,ux*dys+dyux*s],[uy*dxs+dxuy*s,uy*dys+dyuy*s]]);
    output tensor[2,2] out = ([[ux*dxs+dxux*s,ux*dys+dyux*s],[uy*dxs+dxuy*s,uy*dys+dyuy*s]])-inst(Dg, u,s);


    update {
             stabilize;
    }
}

initially [ sample(ui, vi) | vi in 0..(outSize-1), ui in 0..(outSize-1) ];
