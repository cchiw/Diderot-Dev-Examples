//mip2
input vec3 camAt ("camera look-at point") = [0,0,0];//[1,1,1];
input vec3 camEye ("camera look-from point") = [6,9,2];//[7,10,3];

input vec3 camUp ("camera pseudo-up vector") = [0, 0, 1];
input real camNear ("relative to look-at point, distance to near clipping plane (where rays start from)") = -3;
input real camFar ("relative to look-at point, distance to far clipping plane") = 3;
input real camFOV ("field-of-view angle (in degrees) subtended vertically by view plane") = 15;
input bool camOrtho ("whether to use orthographic, instead of perspective, projection") = true;
input int imgResU ;
input int imgResV ;

input real rayStep ("inter-sample step along view direction") = 0.1;
input bool inSphere ("only render samples inside a unit sphere") = true;

//input real out0 ("value at which to initilize output max accumulator; using -inf ensures that output will stay -inf if ray misses volume entirely") = -∞;

input real out0 ("value at which to initilize output max accumulator; using -inf ensures that output will stay -inf if ray misses volume entirely") = -0.6;


//-which c -sz0 10 -sz1 10 -sz2 10 | unu save -f nrrd -o parabc.nrrd
field#4(3)[]F0 = c4hexic⊛  image("../data/parab4.nrrd");
field#4(3)[]F1 = c4hexic⊛  image("../data/parab0.nrrd");
field#4(3)[]F =  maxF(F0,F1);



// (boilerplate) computing ray parameters and view-space basis
vec3 camN = normalize(camAt - camEye);  // N: away from eye
vec3 camU = normalize(camN × camUp);    // U: right
vec3 camV = camN × camU;                // V: down
real camDist = |camAt - camEye|;
real camVmax = tan(camFOV*π/360)*camDist;
real camUmax = camVmax*imgResU/imgResV;
real camNearVsp = camNear + camDist; // near clip, view space
real camFarVsp = camFar + camDist;   // far clip, view space


strand raycast(real rayU, real rayV) {
    real rayN = camNearVsp;
    vec3 UV = rayU*camU + rayV*camV;
    vec3 rayOrig = camEye + (UV if camOrtho else [0,0,0]);
    vec3 rayVec = camN + ([0,0,0] if camOrtho else UV/camDist);

    output real out = out0;

    update { // how to compute one sample of a MIP
        vec3 pos = rayOrig + rayN*rayVec;  // pos = ray sample position
        if (inside(pos,F) && (!inSphere || |pos-camAt| < 1)) {
            out = max(out, F(pos));  // update output based on last sample
        }
        if (rayN > camFarVsp) {  // ray hit the far clipping plane
            stabilize;
        }
        rayN += rayStep;  // increment ray position
    }
}
/* this creates a cell-centered sampling of the view plane */
initially [ raycast(lerp(-camUmax, camUmax, -0.5, ui, imgResU-0.5),
lerp(-camVmax, camVmax, -0.5, vi, imgResV-0.5))
| vi in 0..imgResV-1, ui in 0..imgResU-1 ];
